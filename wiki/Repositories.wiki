#Aca cuento como es la arquitectura para armar un repositorio...

= Introduction =

Como en teoría podríamos tener varios lugares de donde sacar los datos, se pensó la aplicación para dejar abierta la posibilidad de introducir nuevos repositorios según el origen de ellos. En principio solo vamos a crear los repositorios con datos que originan de la base mapeada con Hibernate (en el momento MySql) y lo que esta en memoria.

= Details =

Base: como acá esta el core de la aplicación, alojamos las clases genéricas para cualquier repositorio. Estas son:

* AbstractRepositoryFinder

Tiene los métodos que devuelven todos los repositorios abstractos, junto con el *repositorio abstracto*. El repositorio en realidad esta instanciado a través de la *inyección de dependencias* con spring, ver las siguientes clases para entender cómo.

Ejemplo:
{{{
   AbstractUserRepository userRepository;

   public AbstractUserRepository getUserRespository(){
     return this.userRepository;
   }
   public void setUserRespository(AbstractUserRepository userRepository){
     this.userRepository = userRepository;
   }
}}}

* HibernateRepositoryFinder y MemoryRepositoryFinder

Estas clases heredan de AbstractRepositoryFinder, con lo cual heredan la implementación y las propiedades del mismo. Si bien estas clases no tienen código, se necesitan para inyectarles las clases concretas a través de spring. Ejemplo del XML:

{{{

}}}




Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages